#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newClientAcceptRef ${nuklei:newReferenceId()} # external scope

property nuklei ${nuklei:directory("target/nukleus-itests").streamsCapacity(1024 * 1024, 64 * 1024)}

property clientAccept ${nuklei.streams("http", "source")}
property clientAcceptReply ${nuklei.streams("source", "http#target")}

property newClientAcceptId1 ${nuklei:newStreamId()}
property newSourceCorrelationId1 ${nuklei:newCorrelationId()}
property newClientAcceptId2 ${nuklei:newStreamId()}
property newSourceCorrelationId2 ${nuklei:newCorrelationId()}

connect await ROUTED_CLIENT
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(clientAccept.throttle)}
        option agrona:writer ${agrona:oneToOneWriter(clientAccept.buffer)}
connected

write [0x00 0x00 0x00 0x01]
write ${newClientAcceptId1}
write ${newClientAcceptRef}
write ${newSourceCorrelationId1}
write ${http:header(":scheme", "http")}
write ${http:header(":method", "GET")}
write ${http:header(":path", "/request1")}
write ${http:header(":authority", "localhost:8080")}
write flush

read [0x40 0x00 0x00 0x02]
read ${newClientAcceptId1}
read [0..4]

write [0x00 0x00 0x00 0x03]
write ${newClientAcceptId1}
write flush

write [0x00 0x00 0x00 0x01]
write ${newClientAcceptId2}
write ${newClientAcceptRef}
write ${newSourceCorrelationId2}
write ${http:header(":scheme", "http")}
write ${http:header(":method", "GET")}
write ${http:header(":path", "/request2")}
write ${http:header(":authority", "localhost:8080")}
write flush

read [0x40 0x00 0x00 0x02]
read ${newClientAcceptId2}
read [0..4]

write [0x00 0x00 0x00 0x03]
write ${newClientAcceptId2}
write flush

close
closed


connect await ROUTED_CLIENT
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(clientAcceptReply.buffer)}
        option agrona:writer ${agrona:oneToOneWriter(clientAcceptReply.throttle)}
connected

read [0x00 0x00 0x00 0x01]
read ([0..8]:clientAcceptReplyId1)
read [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
read ${newSourceCorrelationId1}
read ${http:header(":status", "200")}
read ${http:header("content-length", "8")}

write [0x40 0x00 0x00 0x02]
write ${clientAcceptReplyId1}
write [0x00 0x02 0x00 0x00]
write flush

read [0x00 0x00 0x00 0x02]
read ${clientAcceptReplyId1}
read [0x00 0x08]
read "request1"

write [0x40 0x00 0x00 0x02]
write ${clientAcceptReplyId1}
write [0x08 0x00 0x00 0x00]
write flush

read [0x00 0x00 0x00 0x03]
read ${clientAcceptReplyId1}

read [0x00 0x00 0x00 0x01]
read ([0..8]:clientAcceptReplyId2)
read [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
read ${newSourceCorrelationId2}
read ${http:header(":status", "200")}
read ${http:header("content-length", "8")}

write [0x40 0x00 0x00 0x02]
write ${clientAcceptReplyId2}
write [0x00 0x02 0x00 0x00]
write flush

read [0x00 0x00 0x00 0x02]
read ${clientAcceptReplyId2}
read [0x00 0x08]
read "request2"

write [0x40 0x00 0x00 0x02]
write ${clientAcceptReplyId2}
write [0x08 0x00 0x00 0x00]
write flush

read [0x00 0x00 0x00 0x03]
read ${clientAcceptReplyId2}

close
closed
