#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newServerConnectRef ${nuklei:newReferenceId()} # external scope

property nuklei ${nuklei:directory("target/nukleus-itests").streamsCapacity(1024 * 1024, 64 * 1024)}

property serverAccept ${nuklei.streams("http", "source")}
property serverConnect ${nuklei.streams("target", "http#source")}
property serverConnectReply ${nuklei.streams("http", "target")}
property serverAcceptReply1 ${nuklei.streams("source", "http#source")}
property serverAcceptReply2 ${nuklei.streams("source", "http#target")}

property newServerConnectId ${nuklei:newStreamId()}
property newServerAcceptReplyId ${nuklei:newStreamId()}
property newTargetCorrelationId ${nuklei:newCorrelationId()}

connect await ROUTED_SERVER
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(serverAccept.buffer)}
        option agrona:writer ${agrona:oneToOneWriter(serverAccept.throttle)}
connected

read [0x00 0x00 0x00 0x01]
read ([0..8]:serverAcceptId)
read [0x06] "source"
read ([0..8]:serverAcceptRef)
read ([0..8]:sourceCorrelationId)

write [0x40 0x00 0x00 0x02]
write ${serverAcceptId}
write [0x00 0x02 0x00 0x00]
write [0x00 0x02 0x00 0x00]
write flush

read [0x00 0x00 0x00 0x02]
read ${serverAcceptId}
read [0x00 0x28]
read "GET / HTTP/1.1\r\n"
read "Host: localhost:8080\r\n"
read "\r\n"

write notify HTTP_REQUEST_DECODED

write [0x40 0x00 0x00 0x02]
write ${serverAcceptId}
write [0x3a 0x00 0x00 0x00]
write [0x3a 0x00 0x00 0x00]
write flush

close
closed

connect await HTTP_REQUEST_DECODED
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(serverConnect.throttle)}
        option agrona:writer ${agrona:oneToOneWriter(serverConnect.buffer)}
connected

write [0x00 0x00 0x00 0x01]
write ${newServerConnectId}
write [0x04] "http"
write ${newServerConnectRef}
write ${newTargetCorrelationId}
write ${http:header(":scheme", "http")}
write ${http:header(":method", "GET")}
write ${http:header(":path", "/")}
write ${http:header(":authority", "localhost:8080")}
write flush

write [0x00 0x00 0x00 0x03]
write ${newServerConnectId}
write flush

close
closed

connect await ROUTED_SERVER
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(serverConnectReply.buffer)}
        option agrona:writer ${agrona:oneToOneWriter(serverConnectReply.throttle)}
connected

read [0x00 0x00 0x00 0x01]
read ([0..8]:serverConnectReplyId)
read [0x06] "target"
read [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
read ${newTargetCorrelationId}
read ${http:header(":status", "200")}
read ${http:header("Custom-Header-1", "custom header 1 value")}
read ${http:header("Custom-Header-2", "custom header 2 value")}

read notify HTTP_RESPONSE_RECEIVED

write [0x40 0x00 0x00 0x01]
write ${serverConnectReplyId}
write flush

close
closed

connect await HTTP_RESPONSE_RECEIVED
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(serverAcceptReply1.throttle)}
        option agrona:writer ${agrona:oneToOneWriter(serverAcceptReply1.buffer)}
connected

write [0x00 0x00 0x00 0x01]
write ${newServerAcceptReplyId}
write [0x04] "http"
write [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
write ${sourceCorrelationId}
write flush

write notify SOURCE_OUTPUT_BEGIN_WRITTEN

read [0x40 0x00 0x00 0x02]
read ${newServerAcceptReplyId}
read [0..4]
read [0..4]

connect await SOURCE_OUTPUT_BEGIN_WRITTEN
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(serverAcceptReply2.throttle)}
        option agrona:writer ${agrona:oneToOneWriter(serverAcceptReply2.buffer)}
connected

write [0x00 0x00 0x00 0x02]
write ${newServerAcceptReplyId}
write [0x00 0x13]
write "HTTP/1.1 507 Insufficient Storage\r\n"
write "\r\n"
write flush

close
closed
